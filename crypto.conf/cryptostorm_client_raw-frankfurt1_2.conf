# this is the cryptostorm.is client settings file, versioning...
# cryptostorm_client_raw-frankfurt1_2.conf

# it is intended to provide connection solely to the Frankfurt exitnode cluster
# DNS resolver redundancy provided via connection TLD round-robin logic
# Chelsea Manning is indeed a badassed chick: #FreeChelsea!
# also... FuckTheNSA - for reals


client
dev tun
resolv-retry 16
nobind
float

remote-random
# randomizes selection of connection profile from list below, for redundancy against...
# DNS blacklisting-based session blocking attacks


# frankfurt cluster
<connection>
remote raw-frankfurt.cryptostorm.net 443 udp
</connection>

<connection>
remote raw-frankfurt.cryptostorm.org 443 udp
</connection>

<connection>
remote raw-frankfurt.cryptostorm.nu 443 udp
</connection>

<connection>
remote raw-frankfurt.cstorm.pw 443 udp
</connection>


comp-lzo no
# specifies refusal of link-layer compression defaults
# we prefer compression be handled elsewhere in the OSI layers
# see forum for ongoing discussion - https://cryptostorm.org/viewtopic.php?f=38&t=5981

down-pre
# runs client-side "down" script prior to shutdown, to help minimise risk...
# of session termination packet leakage

allow-pull-fqdn
# allows client to pull DNS names from server
# we don't use but may in future leakblock integration

explicit-exit-notify 3
# attempts to notify exit node when client session is terminated
# strengthens MiTM protections for orphan sessions

hand-window 37
# specified duration (in seconds) to wait for the session handshake to complete
# a renegotiation taking longer than this has a problem, & should be aborted

fragment 1400
# congruent with server-side --fragment directive

auth-user-pass /root/login.conf
# passes up, via bootstrapped TLS, SHA512 hashed token value to authenticate to darknet

# auth-retry interact
# 'interact' is an experimental parameter not yet in our production build.

ca ca.crt
# specification & location of server-verification PKI materials
# for details, see http://pki.cryptostorm.org

<ca>
-----BEGIN CERTIFICATE-----
MIIFHjCCBAagAwIBAgIJAPXIBgkKVkuyMA0GCSqGSIb3DQEBCwUAMIG6MQswCQYD
VQQGEwJDQTELMAkGA1UECBMCUUMxETAPBgNVBAcTCE1vbnRyZWFsMTYwNAYDVQQK
FC1LYXRhbmEgSG9sZGluZ3MgTGltaXRlIC8gIGNyeXB0b3N0b3JtX2RhcmtuZXQx
ETAPBgNVBAsTCFRlY2ggT3BzMRcwFQYDVQQDFA5jcnlwdG9zdG9ybV9pczEnMCUG
CSqGSIb3DQEJARYYY2VydGFkbWluQGNyeXB0b3N0b3JtLmlzMB4XDTEzMTAxMTEz
NDA0NloXDTE3MDYwOTEzNDA0NlowgboxCzAJBgNVBAYTAkNBMQswCQYDVQQIEwJR
QzERMA8GA1UEBxMITW9udHJlYWwxNjA0BgNVBAoULUthdGFuYSBIb2xkaW5ncyBM
aW1pdGUgLyAgY3J5cHRvc3Rvcm1fZGFya25ldDERMA8GA1UECxMIVGVjaCBPcHMx
FzAVBgNVBAMUDmNyeXB0b3N0b3JtX2lzMScwJQYJKoZIhvcNAQkBFhhjZXJ0YWRt
aW5AY3J5cHRvc3Rvcm0uaXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQDS4TuqOoT6NrE7oNXj5il97Ml306F9rmEf22+E/5uCsiTNL7inanLsDixihq2l
e0anBK8UvDPExYIWLpXu4ERFFsWS//AoZer8BlVYKnEEgzPh5UV8Jy2TyOlZ26Yz
g1A4MRcDFdPUXLq5Z8hw09k1uqOPU6trv5J+5TwhzMHrMunip8hvx8uXjzQ4DLPK
RKfRzwl+2ydyXgAGdfY1zLlvYvzvVUc4GcLXmAOLT4ZjWKxl4MoqNwf9VBfdLWn5
mWuYp/tT3RxNjKHnuqZlYhCvfWp1hbzSW/OdlO13B1C/PSfFnfFzlANWh31bfvos
pbCIFYG6RXIiP+Arc2sLVgTHAgMBAAGjggEjMIIBHzAdBgNVHQ4EFgQUWmCUeZzm
Qa+zcOA+KWfNF1e2Z9cwge8GA1UdIwSB5zCB5IAUWmCUeZzmQa+zcOA+KWfNF1e2
Z9ehgcCkgb0wgboxCzAJBgNVBAYTAkNBMQswCQYDVQQIEwJRQzERMA8GA1UEBxMI
TW9udHJlYWwxNjA0BgNVBAoULUthdGFuYSBIb2xkaW5ncyBMaW1pdGUgLyAgY3J5
cHRvc3Rvcm1fZGFya25ldDERMA8GA1UECxMIVGVjaCBPcHMxFzAVBgNVBAMUDmNy
eXB0b3N0b3JtX2lzMScwJQYJKoZIhvcNAQkBFhhjZXJ0YWRtaW5AY3J5cHRvc3Rv
cm0uaXOCCQD1yAYJClZLsjAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IB
AQDKDYRtxELcCUZwnGvQa8hp5lO/U87yYzOSP3OON4hBS6YWEmRyV3GvZtGibadl
8HbOU0TRS1skcS0g8OfiY+t/qitIpBuLMHgJHubBMWQ5SP9RlSy2ilxt7J+UGbw3
Xi6u7RRG1dOEZkN0RxpbZQeGf7MD6RTI+4JMRvstI0t2wpfAk0eF0FM++iqhR9mu
aH8apEFDUvCQv4NnDrXJqDUJi8Z56SHEJQ5NMt3ugv7vtY3kI7sciuPdW3hDPsJh
/T3cOWUeYeIVknVHwMuUFf6gdxZ8crrWkANpjwOm0gVh1BPRQzXXPKlSVUGgEVFD
XgJyvkX663aTcshEON1+bXp6
-----END CERTIFICATE-----
</ca>

ns-cert-type server
# requires TLS-level confirmation of categorical state of server-side certificate for MiTM hardening.

auth SHA512
# data channel HMAC generation
# heavy processor load from this parameter, but the benefit is big gains in packet-level...
# integrity checks, & protection against packet injections / MiTM attack vectors

cipher AES-256-CBC
# data channel stream cipher methodology
# we are actively testing CBC alternatives & will deploy once well-tested...
# cipher libraries support our choice - AES-GCM is looking good currently

replay-window 128 30
# settings which determine when to throw out UDP datagrams that are out of order...
# either temporally or via sequence number

tls-cipher TLS-DHE-RSA-WITH-AES-256-CBC-SHA
# implements 'perfect forward secrecy' via TLS 1.x & its ephemeral Diffie-Hellman...
# see our forum for extensive discussion of ECDHE v. DHE & tradeoffs wrt ECC curve choice
# http://ecc.cryptostorm.org

tls-client
key-method 2
# specification of entropy source to be used in initial generation of TLS keys as part of session bootstrap

log devnull.txt
verb 0
mute 1
# sets logging verbosity client-side, by default, to zero
# no logs kept locally of connections - this can be changed...
# if you'd like to see more details of connection initiation & negotiation
